install.packages("tidyverse")
install.packages("dplyr")
install.packages("car")
install.packages("caret")
install.packages("tidyverse")
install.packages("swirl")
library(swirl)
swirl()
# Access the data
data(gapminder)
# ---- Preparing the workspace ----
library(gapminder) # Accessing the data
library(ggplot2) # Data visualization
library(dplyr) # Data manipulation
# Access the data
data(gapminder)
# or
gapminder <- gapminder::gapminder
# The ggplot() function initializes a gpplot object
ggplot()
# Specify the data set
ggplot(gapminder)
install.packages("gapminder")
install.packages("gapminder")
# ---- Preparing the workspace ----
library(gapminder) # Accessing the data
library(ggplot2) # Data visualization
library(dplyr) # Data manipulation
# Access the data
data(gapminder)
# or
gapminder <- gapminder::gapminder
# The ggplot() function initializes a gpplot object
ggplot()
# Specify the data set
ggplot(gapminder)
head (gapminder)
# Specify the data set
ggplot(gapminder)
# The ggplot() function initializes a gpplot object
ggplot()
# Specify the data set
ggplot(gapminder)
# Specify the coordinate system
ggplot(gapminder, aes(x = year, y = pop))
# Define the geom as a new layer
# To create a scatterplot, use the function geom_point()
ggplot(gapminder, aes(x = year, y = pop)) +
geom_point()
# Define the geom as a new layer
# To create a scatterplot, use the function geom_point()
ggplot(gapminder, aes(x = year, y = pop)) +
geom_point()
# Specify the coordinate system
ggplot(gapminder, aes(x = year, y = pop))
# Define the geom as a new layer
# To create a scatterplot, use the function geom_point()
ggplot(gapminder, aes(x = year, y = pop)) +
geom_point()
# Define the geom as a new layer
# To create a scatterplot, use the function geom_point()
ggplot(gapminder, aes(x = year, y = pop)) +
geom_point()
# Alternatively, specify to each geom function being used
ggplot(gapminder) +
geom_point(aes(x = year, y = pop))
# ---- Adding dimensions: color ----
# Point color based on continent
ggplot(gapminder) +
geom_point(aes(x = year, y = pop, col = continent))
class(gapminder$pop)
class(gapminder$pop)
# To check the structure of each column quickly
str(gapminder)
# ---- Preparing the workspace ----
library(gapminder) # Accessing the data
library(ggplot2) # Data visualization
library(dplyr) # Data manipulation
# Access the data
data(gapminder)
# The ggplot() function initializes a gpplot object
ggplot()
# ---- Boxplots ----
# A categorical (factor) column on the x axis
ggplot(gapminder) +
geom_boxplot(aes(x = continent, y = lifeExp), fill = "pink")
# The ggplot() function initializes a gpplot object
ggplot()
# Specify the data set
ggplot(gapminder)
# The ggplot() function initializes a gpplot object
ggplot()
# The ggplot() function initializes a gpplot object
ggplot()
# Specify the data set
ggplot(gapminder)
head (gapminder)
# Specify the coordinate system
ggplot(gapminder, aes(x = year, y = pop))
# Access the data
data(gapminder)
# ---- Preparing the workspace ----
library(gapminder) # Accessing the data
library(ggplot2) # Data visualization
library(dplyr) # Data manipulation
# Access the data
data(gapminder)
# The ggplot() function initializes a gpplot object
ggplot()
# Specify the data set
ggplot(gapminder)
head (gapminder)
# Specify the coordinate system
ggplot(gapminder, aes(x = year, y = pop))
# Define the geom as a new layer
# To create a scatterplot, use the function geom_point()
ggplot(gapminder, aes(x = year, y = pop)) +
geom_point()
# ---- Facetting Plots ----
# Each continent gets its own panel
figure1 +
facet_wrap(~continent)
figure1 +
xlab("Year") +
ylab("Population")
figure1 <- ggplot(gapminder) +
geom_line(aes(x = year, y = pop, col = continent, group = country))
figure1
figure1 +
xlab("Year") +
ylab("Population")
figure1 +
theme_bw()
figure1 <- figure1 +
theme_bw() +
scale_color_manual(values = c("black", "green", "red", "darkorchid4", "#228B22"))
figure1
figure1 +
facet_wrap(~continent)
figure1 <- figure1 +
facet_wrap(~continent, scales = "free_y")
figure1
figure1 <- figure1 +
facet_wrap(~continent, scales = "free_y")
figure1
gapminder %>%
group_by(continent) %>%
summarise(average_gdp = mean(gdpPercap))
gapminder %>%
group_by(continent) %>%
summarise(mean(gdpPercap))
gapminder %>%
group_by(continent) %>%
summarise(average_gdp = mean(gdpPercap))
df1 <- gapminder %>%
filter(year > 1990) %>%
group_by(continent, year) %>%
summarise(minimum_pop = min(pop),
maximum_pop = max(pop),
mean_pop = mean(pop))
df1
library(gapminder) # Accessing the data
library(ggplot2) # Data visualization
library(dplyr) # Data manipulation
data(gapminder)
ggplot()
ggplot(gapminder)
head (gapminder)
ggplot(gapminder, aes(x = year, y = pop))
ggplot(gapminder, aes(x = year, y = pop)) +
geom_point()
ggplot(gapminder) +
geom_point(aes(x = year, y = pop))
ggplot(gapminder) +
geom_point(aes(x = year, y = pop, col = continent))
ggplot(gapminder) +
geom_point(aes(x = year, y = pop), col = "blue")
ggplot(gapminder) +
geom_boxplot(aes(x = continent, y = lifeExp), fill = "pink")
library(dplyr)
library (tidyr)
US_data <- read.csv("US_data.csv")
head(US_data, 2)
str(US_data)
glimpse(US_data)
library(dplyr)
library(ggplot2)
library(plyr)
library(boot)
mydata <- read.csv("mydata.csv")
setwd( "C:/Users/suarep/Documents/pds/dataScience/gitRepo/lab5/r_lab5")
mydata <- read.csv("mydata.csv")
head(mydata)
mutate(mydata, normal_thickness = thickness rnorm(n = 205, mean = 0, sd = 1)))
head(mydata)
mutate(mydata, normal_thickness = thickness ==1)
head(mydata)
mutate(mydata, normal_thickness = thickness)
head(mydata)
library(boot)
install.packages(boot)
set.seed(123)
mutate(mydata, normal_thickness = age/year)
head(mydata)
?rnorm
levels(mydata$status)
set.seed(123)
mysimple <- sample_n(mydata, 30)
mysimple
mysimple <- sample_n(mydata, 30),
mysimple
overall_values <- mydata %>%
group_by(status) %>%
summarise(proporation = mean(status))
overall_values
mydata %>%
mutate(normal_thickness = thickness) %>%
head(mydata)
head(mydata)
set.seed(123)
mystratified <- mydata %>%
group_by(sex) %>%
sample_n(30)
mystratified
#
stratified_values <- mystratified %>%
group_by(sex) %>%
summarise(status = max(status),
proporation = mean(status)),
# Look at stratified_values
stratified_values
stratified_values <- mystratified %>%
group_by(sex) %>%
summarise(status = max(status),
proporation = mean(status))
# Look at stratified_values
stratified_values
stratified_values <- mystratified %>%
group_by(sex) %>%
summarise(status = max(status),
proporation = mean(status)))
# Look at stratified_values
stratified_values
plot4 <- ggplot(mydata, aes(thickness)) + stat_ecdf(geom = "step"),
plot4 <- ggplot(mydata, aes(thickness)) + stat_ecdf(geom = "step")
# Look at plot4
plot4
plot4 <- ggplot(mydata, aes(thickness)) + stat_ecdf(geom = "step")))
# Look at plot4
plot4
n()
count <- count(mydata$status)
count
mysimple <- sample_n(mydata, 30)
mysimple
mystratified <- mydata %>%
group_by(sex) %>%
sample_n(30)
mystratified
mu <- mean(mydata$age)
mu
sigma <- sd(age),
sigma
sigma <- sd(age)
sigma
